/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.softwerke.srv.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.softwerke.srv.model.Article;
import com.softwerke.srv.model.ArticleModel;
import com.softwerke.srv.model.ArticleSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Article service. Represents a row in the &quot;new_perfect_journal_Article&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.softwerke.srv.model.ArticleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ArticleImpl}.
 * </p>
 *
 * @author Sasha
 * @see ArticleImpl
 * @see com.softwerke.srv.model.Article
 * @see com.softwerke.srv.model.ArticleModel
 * @generated
 */
@JSON(strict = true)
public class ArticleModelImpl extends BaseModelImpl<Article>
	implements ArticleModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a article model instance should use the {@link com.softwerke.srv.model.Article} interface instead.
	 */
	public static final String TABLE_NAME = "new_perfect_journal_Article";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "articleId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "articleName", Types.VARCHAR },
			{ "articleContent", Types.VARCHAR },
			{ "articleRefuseComment", Types.VARCHAR },
			{ "articleStatus", Types.INTEGER },
			{ "isArticlePublished", Types.BOOLEAN },
			{ "userId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table new_perfect_journal_Article (uuid_ VARCHAR(75) null,articleId LONG not null primary key,groupId LONG,articleName VARCHAR(75) null,articleContent TEXT null,articleRefuseComment VARCHAR(75) null,articleStatus INTEGER,isArticlePublished BOOLEAN,userId LONG)";
	public static final String TABLE_SQL_DROP = "drop table new_perfect_journal_Article";
	public static final String ORDER_BY_JPQL = " ORDER BY article.articleId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY new_perfect_journal_Article.articleId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.softwerke.srv.model.Article"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.softwerke.srv.model.Article"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.softwerke.srv.model.Article"),
			true);
	public static long ARTICLESTATUS_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long ISARTICLEPUBLISHED_COLUMN_BITMASK = 4L;
	public static long USERID_COLUMN_BITMASK = 8L;
	public static long UUID_COLUMN_BITMASK = 16L;
	public static long ARTICLEID_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Article toModel(ArticleSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Article model = new ArticleImpl();

		model.setUuid(soapModel.getUuid());
		model.setArticleId(soapModel.getArticleId());
		model.setGroupId(soapModel.getGroupId());
		model.setArticleName(soapModel.getArticleName());
		model.setArticleContent(soapModel.getArticleContent());
		model.setArticleRefuseComment(soapModel.getArticleRefuseComment());
		model.setArticleStatus(soapModel.getArticleStatus());
		model.setIsArticlePublished(soapModel.getIsArticlePublished());
		model.setUserId(soapModel.getUserId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Article> toModels(ArticleSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Article> models = new ArrayList<Article>(soapModels.length);

		for (ArticleSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.softwerke.srv.model.Article"));

	public ArticleModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _articleId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setArticleId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _articleId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Article.class;
	}

	@Override
	public String getModelClassName() {
		return Article.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("articleId", getArticleId());
		attributes.put("groupId", getGroupId());
		attributes.put("articleName", getArticleName());
		attributes.put("articleContent", getArticleContent());
		attributes.put("articleRefuseComment", getArticleRefuseComment());
		attributes.put("articleStatus", getArticleStatus());
		attributes.put("isArticlePublished", getIsArticlePublished());
		attributes.put("userId", getUserId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long articleId = (Long)attributes.get("articleId");

		if (articleId != null) {
			setArticleId(articleId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		String articleName = (String)attributes.get("articleName");

		if (articleName != null) {
			setArticleName(articleName);
		}

		String articleContent = (String)attributes.get("articleContent");

		if (articleContent != null) {
			setArticleContent(articleContent);
		}

		String articleRefuseComment = (String)attributes.get(
				"articleRefuseComment");

		if (articleRefuseComment != null) {
			setArticleRefuseComment(articleRefuseComment);
		}

		Integer articleStatus = (Integer)attributes.get("articleStatus");

		if (articleStatus != null) {
			setArticleStatus(articleStatus);
		}

		Boolean isArticlePublished = (Boolean)attributes.get(
				"isArticlePublished");

		if (isArticlePublished != null) {
			setIsArticlePublished(isArticlePublished);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getArticleId() {
		return _articleId;
	}

	@Override
	public void setArticleId(long articleId) {
		_articleId = articleId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public String getArticleName() {
		if (_articleName == null) {
			return StringPool.BLANK;
		}
		else {
			return _articleName;
		}
	}

	@Override
	public void setArticleName(String articleName) {
		_articleName = articleName;
	}

	@JSON
	@Override
	public String getArticleContent() {
		if (_articleContent == null) {
			return StringPool.BLANK;
		}
		else {
			return _articleContent;
		}
	}

	@Override
	public void setArticleContent(String articleContent) {
		_articleContent = articleContent;
	}

	@JSON
	@Override
	public String getArticleRefuseComment() {
		if (_articleRefuseComment == null) {
			return StringPool.BLANK;
		}
		else {
			return _articleRefuseComment;
		}
	}

	@Override
	public void setArticleRefuseComment(String articleRefuseComment) {
		_articleRefuseComment = articleRefuseComment;
	}

	@JSON
	@Override
	public int getArticleStatus() {
		return _articleStatus;
	}

	@Override
	public void setArticleStatus(int articleStatus) {
		_columnBitmask |= ARTICLESTATUS_COLUMN_BITMASK;

		if (!_setOriginalArticleStatus) {
			_setOriginalArticleStatus = true;

			_originalArticleStatus = _articleStatus;
		}

		_articleStatus = articleStatus;
	}

	public int getOriginalArticleStatus() {
		return _originalArticleStatus;
	}

	@JSON
	@Override
	public boolean getIsArticlePublished() {
		return _isArticlePublished;
	}

	@Override
	public boolean isIsArticlePublished() {
		return _isArticlePublished;
	}

	@Override
	public void setIsArticlePublished(boolean isArticlePublished) {
		_columnBitmask |= ISARTICLEPUBLISHED_COLUMN_BITMASK;

		if (!_setOriginalIsArticlePublished) {
			_setOriginalIsArticlePublished = true;

			_originalIsArticlePublished = _isArticlePublished;
		}

		_isArticlePublished = isArticlePublished;
	}

	public boolean getOriginalIsArticlePublished() {
		return _originalIsArticlePublished;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Article.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Article toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Article)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ArticleImpl articleImpl = new ArticleImpl();

		articleImpl.setUuid(getUuid());
		articleImpl.setArticleId(getArticleId());
		articleImpl.setGroupId(getGroupId());
		articleImpl.setArticleName(getArticleName());
		articleImpl.setArticleContent(getArticleContent());
		articleImpl.setArticleRefuseComment(getArticleRefuseComment());
		articleImpl.setArticleStatus(getArticleStatus());
		articleImpl.setIsArticlePublished(getIsArticlePublished());
		articleImpl.setUserId(getUserId());

		articleImpl.resetOriginalValues();

		return articleImpl;
	}

	@Override
	public int compareTo(Article article) {
		long primaryKey = article.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Article)) {
			return false;
		}

		Article article = (Article)obj;

		long primaryKey = article.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ArticleModelImpl articleModelImpl = this;

		articleModelImpl._originalUuid = articleModelImpl._uuid;

		articleModelImpl._originalGroupId = articleModelImpl._groupId;

		articleModelImpl._setOriginalGroupId = false;

		articleModelImpl._originalArticleStatus = articleModelImpl._articleStatus;

		articleModelImpl._setOriginalArticleStatus = false;

		articleModelImpl._originalIsArticlePublished = articleModelImpl._isArticlePublished;

		articleModelImpl._setOriginalIsArticlePublished = false;

		articleModelImpl._originalUserId = articleModelImpl._userId;

		articleModelImpl._setOriginalUserId = false;

		articleModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Article> toCacheModel() {
		ArticleCacheModel articleCacheModel = new ArticleCacheModel();

		articleCacheModel.uuid = getUuid();

		String uuid = articleCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			articleCacheModel.uuid = null;
		}

		articleCacheModel.articleId = getArticleId();

		articleCacheModel.groupId = getGroupId();

		articleCacheModel.articleName = getArticleName();

		String articleName = articleCacheModel.articleName;

		if ((articleName != null) && (articleName.length() == 0)) {
			articleCacheModel.articleName = null;
		}

		articleCacheModel.articleContent = getArticleContent();

		String articleContent = articleCacheModel.articleContent;

		if ((articleContent != null) && (articleContent.length() == 0)) {
			articleCacheModel.articleContent = null;
		}

		articleCacheModel.articleRefuseComment = getArticleRefuseComment();

		String articleRefuseComment = articleCacheModel.articleRefuseComment;

		if ((articleRefuseComment != null) &&
				(articleRefuseComment.length() == 0)) {
			articleCacheModel.articleRefuseComment = null;
		}

		articleCacheModel.articleStatus = getArticleStatus();

		articleCacheModel.isArticlePublished = getIsArticlePublished();

		articleCacheModel.userId = getUserId();

		return articleCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", articleId=");
		sb.append(getArticleId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", articleName=");
		sb.append(getArticleName());
		sb.append(", articleContent=");
		sb.append(getArticleContent());
		sb.append(", articleRefuseComment=");
		sb.append(getArticleRefuseComment());
		sb.append(", articleStatus=");
		sb.append(getArticleStatus());
		sb.append(", isArticlePublished=");
		sb.append(getIsArticlePublished());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.softwerke.srv.model.Article");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>articleId</column-name><column-value><![CDATA[");
		sb.append(getArticleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>articleName</column-name><column-value><![CDATA[");
		sb.append(getArticleName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>articleContent</column-name><column-value><![CDATA[");
		sb.append(getArticleContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>articleRefuseComment</column-name><column-value><![CDATA[");
		sb.append(getArticleRefuseComment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>articleStatus</column-name><column-value><![CDATA[");
		sb.append(getArticleStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isArticlePublished</column-name><column-value><![CDATA[");
		sb.append(getIsArticlePublished());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Article.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Article.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _articleId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private String _articleName;
	private String _articleContent;
	private String _articleRefuseComment;
	private int _articleStatus;
	private int _originalArticleStatus;
	private boolean _setOriginalArticleStatus;
	private boolean _isArticlePublished;
	private boolean _originalIsArticlePublished;
	private boolean _setOriginalIsArticlePublished;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _columnBitmask;
	private Article _escapedModel;
}