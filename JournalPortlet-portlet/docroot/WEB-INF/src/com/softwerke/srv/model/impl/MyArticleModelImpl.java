/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.softwerke.srv.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.softwerke.srv.model.MyArticle;
import com.softwerke.srv.model.MyArticleModel;
import com.softwerke.srv.model.MyArticleSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MyArticle service. Represents a row in the &quot;journal_MyArticle&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.softwerke.srv.model.MyArticleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MyArticleImpl}.
 * </p>
 *
 * @author Sasha
 * @see MyArticleImpl
 * @see com.softwerke.srv.model.MyArticle
 * @see com.softwerke.srv.model.MyArticleModel
 * @generated
 */
@JSON(strict = true)
public class MyArticleModelImpl extends BaseModelImpl<MyArticle>
	implements MyArticleModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a my article model instance should use the {@link com.softwerke.srv.model.MyArticle} interface instead.
	 */
	public static final String TABLE_NAME = "journal_MyArticle";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "myArticleId", Types.BIGINT },
			{ "myArticleName", Types.VARCHAR },
			{ "myArticleContent", Types.VARCHAR },
			{ "myArticleRefuseComment", Types.VARCHAR },
			{ "myArticleStatus", Types.INTEGER },
			{ "isMyArticlePublished", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table journal_MyArticle (uuid_ VARCHAR(75) null,myArticleId LONG not null primary key,myArticleName VARCHAR(75) null,myArticleContent VARCHAR(75) null,myArticleRefuseComment VARCHAR(75) null,myArticleStatus INTEGER,isMyArticlePublished BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table journal_MyArticle";
	public static final String ORDER_BY_JPQL = " ORDER BY myArticle.myArticleId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY journal_MyArticle.myArticleId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.softwerke.srv.model.MyArticle"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.softwerke.srv.model.MyArticle"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.softwerke.srv.model.MyArticle"),
			true);
	public static long UUID_COLUMN_BITMASK = 1L;
	public static long MYARTICLEID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MyArticle toModel(MyArticleSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MyArticle model = new MyArticleImpl();

		model.setUuid(soapModel.getUuid());
		model.setMyArticleId(soapModel.getMyArticleId());
		model.setMyArticleName(soapModel.getMyArticleName());
		model.setMyArticleContent(soapModel.getMyArticleContent());
		model.setMyArticleRefuseComment(soapModel.getMyArticleRefuseComment());
		model.setMyArticleStatus(soapModel.getMyArticleStatus());
		model.setIsMyArticlePublished(soapModel.getIsMyArticlePublished());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MyArticle> toModels(MyArticleSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MyArticle> models = new ArrayList<MyArticle>(soapModels.length);

		for (MyArticleSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.softwerke.srv.model.MyArticle"));

	public MyArticleModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _myArticleId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMyArticleId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _myArticleId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MyArticle.class;
	}

	@Override
	public String getModelClassName() {
		return MyArticle.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("myArticleId", getMyArticleId());
		attributes.put("myArticleName", getMyArticleName());
		attributes.put("myArticleContent", getMyArticleContent());
		attributes.put("myArticleRefuseComment", getMyArticleRefuseComment());
		attributes.put("myArticleStatus", getMyArticleStatus());
		attributes.put("isMyArticlePublished", getIsMyArticlePublished());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long myArticleId = (Long)attributes.get("myArticleId");

		if (myArticleId != null) {
			setMyArticleId(myArticleId);
		}

		String myArticleName = (String)attributes.get("myArticleName");

		if (myArticleName != null) {
			setMyArticleName(myArticleName);
		}

		String myArticleContent = (String)attributes.get("myArticleContent");

		if (myArticleContent != null) {
			setMyArticleContent(myArticleContent);
		}

		String myArticleRefuseComment = (String)attributes.get(
				"myArticleRefuseComment");

		if (myArticleRefuseComment != null) {
			setMyArticleRefuseComment(myArticleRefuseComment);
		}

		Integer myArticleStatus = (Integer)attributes.get("myArticleStatus");

		if (myArticleStatus != null) {
			setMyArticleStatus(myArticleStatus);
		}

		Boolean isMyArticlePublished = (Boolean)attributes.get(
				"isMyArticlePublished");

		if (isMyArticlePublished != null) {
			setIsMyArticlePublished(isMyArticlePublished);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getMyArticleId() {
		return _myArticleId;
	}

	@Override
	public void setMyArticleId(long myArticleId) {
		_myArticleId = myArticleId;
	}

	@JSON
	@Override
	public String getMyArticleName() {
		if (_myArticleName == null) {
			return StringPool.BLANK;
		}
		else {
			return _myArticleName;
		}
	}

	@Override
	public void setMyArticleName(String myArticleName) {
		_myArticleName = myArticleName;
	}

	@JSON
	@Override
	public String getMyArticleContent() {
		if (_myArticleContent == null) {
			return StringPool.BLANK;
		}
		else {
			return _myArticleContent;
		}
	}

	@Override
	public void setMyArticleContent(String myArticleContent) {
		_myArticleContent = myArticleContent;
	}

	@JSON
	@Override
	public String getMyArticleRefuseComment() {
		if (_myArticleRefuseComment == null) {
			return StringPool.BLANK;
		}
		else {
			return _myArticleRefuseComment;
		}
	}

	@Override
	public void setMyArticleRefuseComment(String myArticleRefuseComment) {
		_myArticleRefuseComment = myArticleRefuseComment;
	}

	@JSON
	@Override
	public int getMyArticleStatus() {
		return _myArticleStatus;
	}

	@Override
	public void setMyArticleStatus(int myArticleStatus) {
		_myArticleStatus = myArticleStatus;
	}

	@JSON
	@Override
	public boolean getIsMyArticlePublished() {
		return _isMyArticlePublished;
	}

	@Override
	public boolean isIsMyArticlePublished() {
		return _isMyArticlePublished;
	}

	@Override
	public void setIsMyArticlePublished(boolean isMyArticlePublished) {
		_isMyArticlePublished = isMyArticlePublished;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			MyArticle.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MyArticle toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MyArticle)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MyArticleImpl myArticleImpl = new MyArticleImpl();

		myArticleImpl.setUuid(getUuid());
		myArticleImpl.setMyArticleId(getMyArticleId());
		myArticleImpl.setMyArticleName(getMyArticleName());
		myArticleImpl.setMyArticleContent(getMyArticleContent());
		myArticleImpl.setMyArticleRefuseComment(getMyArticleRefuseComment());
		myArticleImpl.setMyArticleStatus(getMyArticleStatus());
		myArticleImpl.setIsMyArticlePublished(getIsMyArticlePublished());

		myArticleImpl.resetOriginalValues();

		return myArticleImpl;
	}

	@Override
	public int compareTo(MyArticle myArticle) {
		long primaryKey = myArticle.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MyArticle)) {
			return false;
		}

		MyArticle myArticle = (MyArticle)obj;

		long primaryKey = myArticle.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		MyArticleModelImpl myArticleModelImpl = this;

		myArticleModelImpl._originalUuid = myArticleModelImpl._uuid;

		myArticleModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MyArticle> toCacheModel() {
		MyArticleCacheModel myArticleCacheModel = new MyArticleCacheModel();

		myArticleCacheModel.uuid = getUuid();

		String uuid = myArticleCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			myArticleCacheModel.uuid = null;
		}

		myArticleCacheModel.myArticleId = getMyArticleId();

		myArticleCacheModel.myArticleName = getMyArticleName();

		String myArticleName = myArticleCacheModel.myArticleName;

		if ((myArticleName != null) && (myArticleName.length() == 0)) {
			myArticleCacheModel.myArticleName = null;
		}

		myArticleCacheModel.myArticleContent = getMyArticleContent();

		String myArticleContent = myArticleCacheModel.myArticleContent;

		if ((myArticleContent != null) && (myArticleContent.length() == 0)) {
			myArticleCacheModel.myArticleContent = null;
		}

		myArticleCacheModel.myArticleRefuseComment = getMyArticleRefuseComment();

		String myArticleRefuseComment = myArticleCacheModel.myArticleRefuseComment;

		if ((myArticleRefuseComment != null) &&
				(myArticleRefuseComment.length() == 0)) {
			myArticleCacheModel.myArticleRefuseComment = null;
		}

		myArticleCacheModel.myArticleStatus = getMyArticleStatus();

		myArticleCacheModel.isMyArticlePublished = getIsMyArticlePublished();

		return myArticleCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", myArticleId=");
		sb.append(getMyArticleId());
		sb.append(", myArticleName=");
		sb.append(getMyArticleName());
		sb.append(", myArticleContent=");
		sb.append(getMyArticleContent());
		sb.append(", myArticleRefuseComment=");
		sb.append(getMyArticleRefuseComment());
		sb.append(", myArticleStatus=");
		sb.append(getMyArticleStatus());
		sb.append(", isMyArticlePublished=");
		sb.append(getIsMyArticlePublished());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.softwerke.srv.model.MyArticle");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>myArticleId</column-name><column-value><![CDATA[");
		sb.append(getMyArticleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>myArticleName</column-name><column-value><![CDATA[");
		sb.append(getMyArticleName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>myArticleContent</column-name><column-value><![CDATA[");
		sb.append(getMyArticleContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>myArticleRefuseComment</column-name><column-value><![CDATA[");
		sb.append(getMyArticleRefuseComment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>myArticleStatus</column-name><column-value><![CDATA[");
		sb.append(getMyArticleStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isMyArticlePublished</column-name><column-value><![CDATA[");
		sb.append(getIsMyArticlePublished());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MyArticle.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			MyArticle.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _myArticleId;
	private String _myArticleName;
	private String _myArticleContent;
	private String _myArticleRefuseComment;
	private int _myArticleStatus;
	private boolean _isMyArticlePublished;
	private long _columnBitmask;
	private MyArticle _escapedModel;
}